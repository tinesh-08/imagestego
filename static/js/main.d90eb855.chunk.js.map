{"version":3,"sources":["steganography.js","components/UploadButton.jsx","components/App.jsx","index.js"],"names":["isImageUpload","loadImage","e","reader","FileReader","onload","event","test","result","dataUrl","target","img","Image","ctx","document","getElementById","getContext","canvas","width","height","drawImage","src","value","alert","readAsDataURL","files","encode","message","length","style","display","output","imgData","getImageData","colors","messageBits","getBitsFromNumber","concat","i","code","charCodeAt","getMessageBits","history","pos","loc","getNextLocation","setBit","encodeMessage","data","putImageData","toDataURL","decode","messageSize","getNumberFromBits","push","String","fromCharCode","join","decodeMessage","getBit","number","location","bit","bits","bytes","total","indexOf","UploadButton","htmlFor","id","name","type","onChange","Button","margin","variant","component","App","useState","option","setOption","handleClick","currentTarget","className","onClick","TextField","multiline","placeholder","alt","ReactDOM","render"],"mappings":"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","file":"static/js/main.d90eb855.chunk.js","sourcesContent":["let isImageUpload = false;\n\n// Loads input image to the Canvas for encoding or decoding\nfunction loadImage(e) {\n  let reader = new FileReader();\n  reader.onload = (event) => {\n    let regex = /data:image/;\n    if (regex.test(reader.result)) {      //Checks if the uploaded file is an image \n      isImageUpload = true;\n      let dataUrl = event.target.result;\n      let img = new Image();\n      img.onload = () => {\n        let ctx = document.getElementById('canvas').getContext('2d');\n        ctx.canvas.width = img.width;\n        ctx.canvas.height = img.height;\n        ctx.drawImage(img, 0, 0);\n      }\n      img.src = dataUrl;\n    } else {\n      document.getElementById('upload-photo').value = '';\n      alert(\"Please upload an image!\");\n    }\n  };\n  reader.readAsDataURL(e.target.files[0]);\n};\n\n// Encodes the secret message on the original and displays the encoded image\nfunction encode() {\n  if (isImageUpload) {      //Checks if an image is uploaded  \n    let message = document.getElementById('secret').value;\n    if (message.length > 1000) {\n      alert(\"The message is too big to encode\");\n    } else {\n      document.getElementById('encoded-image').style.display = 'block';\n      document.getElementById('secret').value = '';\n      let output = document.getElementById('encoded-image');\n      let canvas = document.getElementById('canvas');\n      let ctx = canvas.getContext('2d');\n      let imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n      encodeMessage(imgData.data, message);\n      ctx.putImageData(imgData, 0, 0);\n      alert('Image encoded!\\n Save below image for further use!');\n      output.src = canvas.toDataURL();\n    }\n  } else {\n    document.getElementById('upload-photo').value = '';\n    alert(\"Please upload an image!\");\n  }\n};\n\n// Decodes the secret message from the canvas and alerts it to the user\nfunction decode() {\n  let ctx = document.getElementById('canvas').getContext('2d');\n  let imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n  let message = decodeMessage(imgData.data);\n  alert(\"The message encode is:\\n\" + message);\n};\n\n// Encodes message using LSB method\nfunction encodeMessage(colors, message) {\n  let messageBits = getBitsFromNumber(message.length);\n  messageBits = messageBits.concat(getMessageBits(message));\n  let history = [];\n  let pos = 0;\n  while (pos < messageBits.length) {\n    let loc = getNextLocation(history, colors.length);\n    colors[loc] = setBit(colors[loc], 0, messageBits[pos]);\n    while ((loc + 1) % 4 !== 0) {\n      loc++;\n    }\n    colors[loc] = 255;\n    pos++;\n  }\n};\n\n// Decodes message from the image\nfunction decodeMessage(colors) {\n  let history = [];\n  let messageSize = getNumberFromBits(colors, history);\n  if ((messageSize + 1) * 16 > colors.length * 0.75) {\n    return '';\n  }\n  if (messageSize === 0) {\n    return '';\n  }\n  let message = [];\n  for (let i = 0; i < messageSize; i++) {\n    let code = getNumberFromBits(colors, history);\n    message.push(String.fromCharCode(code));\n  }\n  return message.join('');\n};\n\nfunction getBit(number, location) {\n  return ((number >> location) & 1);\n};\n\n// sets the bit in 'location' to 'bit' (either a 1 or 0)\nfunction setBit(number, location, bit) {\n  return (number & ~(1 << location)) | (bit << location);\n};\n\n// returns an array of 1s and 0s for a 2-byte number\nfunction getBitsFromNumber(number) {\n  let bits = [];\n  for (let i = 0; i < 16; i++) {\n    bits.push(getBit(number, i));\n  }\n  return bits;\n};\n\n// returns the next 2-byte number\nfunction getNumberFromBits(bytes, history) {\n  let number = 0,\n    pos = 0;\n  while (pos < 16) {\n    let loc = getNextLocation(history, bytes.length);\n    let bit = getBit(bytes[loc], 0);\n    number = setBit(number, pos, bit);\n    pos++;\n  }\n  return number;\n};\n\n// returns an array of 1s and 0s for the string 'message'\nfunction getMessageBits(message) {\n  let messageBits = [];\n  for (let i = 0; i < message.length; i++) {\n    let code = message.charCodeAt(i);\n    messageBits = messageBits.concat(getBitsFromNumber(code));\n  }\n  return messageBits;\n};\n\n// gets the next location to store a bit\nfunction getNextLocation(history, total) {\n  let loc = 0;\n  while (true) {\n    if (history.indexOf(loc) >= 0) {\n      loc++;\n    } else if ((loc + 1) % 4 === 0) {\n      loc++;\n    } else {\n      history.push(loc);\n      return loc;\n    }\n  }\n};\n\nexport { decode, encode, loadImage };","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { loadImage } from '../steganography';\n\nexport default function UploadButton() {\n  return (\n    <label htmlFor=\"upload-photo\">\n      <input\n        style={{ display: 'none' }}\n        id=\"upload-photo\"\n        name=\"upload-photo\"\n        type=\"file\"\n        onChange={loadImage}\n      />\n      <div>\n        <Button style={{margin: '1rem'}} variant=\"contained\" component=\"span\">\n          Upload Image\n        </Button>\n      </div>\n    </label>\n  );\n}","import React, { useState } from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport UploadButton from './UploadButton';\nimport { encode, decode } from '../steganography';\n\nexport default function App() {\n\n  const [option, setOption] = useState('home');\n\n  function handleClick(event) {\n\n    const { name } = event.currentTarget;\n    if (name === 'home') {\n      setOption('home');\n      document.getElementById('encoded-image').style.display = 'none';\n    } else if (name === 'encode') {\n      setOption('encode');\n    } else if (name === 'decode') {\n      setOption('decode');\n    }\n  }\n\n  return (\n    <div className='content'>\n      <h1>IMAGE<span id=\"word\"> STEGO</span></h1>\n      {option === 'home' && <Button style={{margin: '1rem'}} name='encode' onClick={handleClick} variant=\"contained\">Encode</Button>}\n      {option === 'home' && <Button style={{margin: '1rem'}} name='decode' onClick={handleClick} variant=\"contained\">Decode</Button>}\n      {option === 'encode' && <TextField variant=\"outlined\" multiline type=\"text\" id=\"secret\" name=\"secret\" placeholder=\"Enter secret message\" />}\n      {option !== 'home' && <UploadButton />}\n      {option === 'encode' && <Button style={{margin: '1rem'}} onClick={encode} variant=\"contained\">Encode</Button>}\n      {option === 'decode' && <Button style={{margin: '1rem'}} onClick={decode} variant=\"contained\">Decode</Button>}\n      {option !== 'home' && <Button style={{margin: '1rem'}} name='home' onClick={handleClick} variant=\"contained\">Return</Button>}\n      <img id=\"encoded-image\" alt='encoded output'></img>\n      <canvas id=\"canvas\"></canvas>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './style.css';\n\nReactDOM.render(<\n  App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}